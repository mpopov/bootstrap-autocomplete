/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/main.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/dropdown.ts":
/*!*************************!*\
  !*** ./src/dropdown.ts ***!
  \*************************/
/*! exports provided: Dropdown, DropdownV4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Dropdown\", function() { return Dropdown; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DropdownV4\", function() { return DropdownV4; });\n/*\r\n *\tDropdown class. Manages the dropdown drawing\r\n */\r\nvar Dropdown = /** @class */ (function () {\r\n    function Dropdown(e, formatItemCbk, autoSelect, noResultsText) {\r\n        this.initialized = false;\r\n        this.shown = false;\r\n        this.items = [];\r\n        this.ddMouseover = false;\r\n        this._$el = e;\r\n        this.formatItem = formatItemCbk;\r\n        this.autoSelect = autoSelect;\r\n        this.noResultsText = noResultsText;\r\n        // initialize it in lazy mode to deal with glitches like modals\r\n        // this.init();\r\n    }\r\n    Dropdown.prototype.init = function () {\r\n        var _this = this;\r\n        // Initialize dropdown\r\n        var pos = $.extend({}, this._$el.position(), {\r\n            height: this._$el[0].offsetHeight\r\n        });\r\n        // create element\r\n        this._dd = $('<ul />');\r\n        // add our class and basic dropdown-menu class\r\n        this._dd.addClass('bootstrap-autocomplete dropdown-menu');\r\n        this._dd.insertAfter(this._$el);\r\n        this._dd.css({ top: pos.top + this._$el.outerHeight(), left: pos.left, width: this._$el.outerWidth() });\r\n        // click event on items\r\n        this._dd.on('click', 'li', function (evt) {\r\n            // console.log('clicked', evt.currentTarget);\r\n            //console.log($(evt.currentTarget));\r\n            var item = $(evt.currentTarget).data('item');\r\n            _this.itemSelectedLaunchEvent(item);\r\n            return false;\r\n        });\r\n        this._dd.on('keyup', function (evt) {\r\n            if (_this.shown) {\r\n                switch (evt.which) {\r\n                    case 27:\r\n                        // ESC\r\n                        _this.hide();\r\n                        _this._$el.focus();\r\n                        break;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        this._dd.on('mouseenter', function (evt) {\r\n            _this.ddMouseover = true;\r\n        });\r\n        this._dd.on('mouseleave', function (evt) {\r\n            _this.ddMouseover = false;\r\n        });\r\n        this._dd.on('mouseenter', 'li', function (evt) {\r\n            if (_this.haveResults) {\r\n                $(evt.currentTarget).closest('ul').find('li.active').removeClass('active');\r\n                $(evt.currentTarget).addClass('active');\r\n                _this.mouseover = true;\r\n            }\r\n        });\r\n        this._dd.on('mouseleave', 'li', function (evt) {\r\n            _this.mouseover = false;\r\n        });\r\n        this.initialized = true;\r\n    };\r\n    Dropdown.prototype.checkInitialized = function () {\r\n        // Lazy init\r\n        if (!this.initialized) {\r\n            // if not already initialized\r\n            this.init();\r\n        }\r\n    };\r\n    Object.defineProperty(Dropdown.prototype, \"isMouseOver\", {\r\n        get: function () {\r\n            return this.mouseover;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dropdown.prototype, \"isDdMouseOver\", {\r\n        get: function () {\r\n            return this.ddMouseover;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Dropdown.prototype, \"haveResults\", {\r\n        get: function () {\r\n            return (this.items.length > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Dropdown.prototype.focusNextItem = function (reversed) {\r\n        if (this.haveResults) {\r\n            // get selected\r\n            var currElem = this._dd.find('li.active');\r\n            var nextElem = reversed ? currElem.prev() : currElem.next();\r\n            if (nextElem.length == 0) {\r\n                // first \r\n                nextElem = reversed ? this._dd.find('li').last() : this._dd.find('li').first();\r\n            }\r\n            currElem.removeClass('active');\r\n            nextElem.addClass('active');\r\n        }\r\n    };\r\n    Dropdown.prototype.focusPreviousItem = function () {\r\n        this.focusNextItem(true);\r\n    };\r\n    Dropdown.prototype.selectFocusItem = function () {\r\n        this._dd.find('li.active').trigger('click');\r\n    };\r\n    Object.defineProperty(Dropdown.prototype, \"isItemFocused\", {\r\n        get: function () {\r\n            if (this._dd.find('li.active').length > 0) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Dropdown.prototype.show = function () {\r\n        if (!this.shown) {\r\n            this._dd.dropdown().show();\r\n            this.shown = true;\r\n        }\r\n    };\r\n    Dropdown.prototype.isShown = function () {\r\n        return this.shown;\r\n    };\r\n    Dropdown.prototype.hide = function () {\r\n        if (this.shown) {\r\n            this._dd.dropdown().hide();\r\n            this.shown = false;\r\n        }\r\n    };\r\n    Dropdown.prototype.updateItems = function (items, searchText) {\r\n        // console.log('updateItems', items);\r\n        this.items = items;\r\n        this.searchText = searchText;\r\n        this.refreshItemList();\r\n    };\r\n    Dropdown.prototype.showMatchedText = function (text, qry) {\r\n        var startIndex = text.toLowerCase().indexOf(qry.toLowerCase());\r\n        if (startIndex > -1) {\r\n            var endIndex = startIndex + qry.length;\r\n            return text.slice(0, startIndex) + '<b>'\r\n                + text.slice(startIndex, endIndex) + '</b>'\r\n                + text.slice(endIndex);\r\n        }\r\n        return text;\r\n    };\r\n    Dropdown.prototype.refreshItemList = function () {\r\n        var _this = this;\r\n        this.checkInitialized();\r\n        this._dd.empty();\r\n        var liList = [];\r\n        if (this.items.length > 0) {\r\n            this.items.forEach(function (item) {\r\n                var itemFormatted = _this.formatItem(item);\r\n                if (typeof itemFormatted === 'string') {\r\n                    itemFormatted = { text: itemFormatted };\r\n                }\r\n                var itemText;\r\n                var itemHtml;\r\n                itemText = _this.showMatchedText(itemFormatted.text, _this.searchText);\r\n                if (itemFormatted.html !== undefined) {\r\n                    itemHtml = itemFormatted.html;\r\n                }\r\n                else {\r\n                    itemHtml = itemText;\r\n                }\r\n                var disabledItem = itemFormatted.disabled;\r\n                var li = $('<li >');\r\n                li.append($('<a>').attr('href', '#!').html(itemHtml))\r\n                    .data('item', item);\r\n                if (disabledItem) {\r\n                    li.addClass('disabled');\r\n                }\r\n                liList.push(li);\r\n            });\r\n        }\r\n        else {\r\n            // No results\r\n            var li = $('<li >');\r\n            li.append($('<a>').attr('href', '#!').html(this.noResultsText))\r\n                .addClass('disabled');\r\n            liList.push(li);\r\n        }\r\n        this._dd.append(liList);\r\n    };\r\n    Dropdown.prototype.itemSelectedLaunchEvent = function (item) {\r\n        // launch selected event\r\n        // console.log('itemSelectedLaunchEvent', item);\r\n        this._$el.trigger('autocomplete.select', item);\r\n    };\r\n    return Dropdown;\r\n}());\r\n\r\nvar DropdownV4 = /** @class */ (function () {\r\n    function DropdownV4(e, formatItemCbk, autoSelect, noResultsText) {\r\n        this.initialized = false;\r\n        this.shown = false;\r\n        this.items = [];\r\n        this.ddMouseover = false;\r\n        this._$el = e;\r\n        this.formatItem = formatItemCbk;\r\n        this.autoSelect = autoSelect;\r\n        this.noResultsText = noResultsText;\r\n        // initialize it in lazy mode to deal with glitches like modals\r\n        // this.init();\r\n    }\r\n    DropdownV4.prototype.getElPos = function () {\r\n        var pos = $.extend({}, this._$el.position(), {\r\n            height: this._$el[0].offsetHeight\r\n        });\r\n        return pos;\r\n    };\r\n    DropdownV4.prototype.init = function () {\r\n        var _this = this;\r\n        // console.log('UIUIUIUIUIUIUII');\r\n        // Initialize dropdown\r\n        var pos = this.getElPos();\r\n        // create element\r\n        this._dd = $('<div />');\r\n        // add our class and basic dropdown-menu class\r\n        this._dd.addClass('bootstrap-autocomplete dropdown-menu');\r\n        this._dd.insertAfter(this._$el);\r\n        this._dd.css({ top: pos.top + this._$el.outerHeight(), left: pos.left, width: this._$el.outerWidth() });\r\n        // click event on items\r\n        this._dd.on('click', '.dropdown-item', function (evt) {\r\n            // console.log('clicked', evt.currentTarget);\r\n            // console.log($(evt.currentTarget));\r\n            var item = $(evt.currentTarget).data('item');\r\n            _this.itemSelectedLaunchEvent(item);\r\n        });\r\n        this._dd.on('keyup', function (evt) {\r\n            if (_this.shown) {\r\n                switch (evt.which) {\r\n                    case 27:\r\n                        // ESC\r\n                        _this.hide();\r\n                        _this._$el.focus();\r\n                        break;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n        this._dd.on('mouseenter', function (evt) {\r\n            _this.ddMouseover = true;\r\n        });\r\n        this._dd.on('mouseleave', function (evt) {\r\n            _this.ddMouseover = false;\r\n        });\r\n        this._dd.on('mouseenter', '.dropdown-item', function (evt) {\r\n            if (_this.haveResults) {\r\n                $(evt.currentTarget).closest('div').find('.dropdown-item.active').removeClass('active');\r\n                $(evt.currentTarget).addClass('active');\r\n                _this.mouseover = true;\r\n            }\r\n        });\r\n        this._dd.on('mouseleave', '.dropdown-item', function (evt) {\r\n            _this.mouseover = false;\r\n        });\r\n        this.initialized = true;\r\n    };\r\n    DropdownV4.prototype.checkInitialized = function () {\r\n        // Lazy init\r\n        if (!this.initialized) {\r\n            // if not already initialized\r\n            this.init();\r\n        }\r\n    };\r\n    Object.defineProperty(DropdownV4.prototype, \"isMouseOver\", {\r\n        get: function () {\r\n            return this.mouseover;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DropdownV4.prototype, \"isDdMouseOver\", {\r\n        get: function () {\r\n            return this.ddMouseover;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DropdownV4.prototype, \"haveResults\", {\r\n        get: function () {\r\n            return (this.items.length > 0);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DropdownV4.prototype.focusNextItem = function (reversed) {\r\n        if (this.haveResults) {\r\n            // get selected\r\n            var currElem = this._dd.find('.dropdown-item.active');\r\n            var nextElem = reversed ? currElem.prev() : currElem.next();\r\n            if (nextElem.length == 0) {\r\n                // first \r\n                nextElem = reversed ? this._dd.find('.dropdown-item').last() : this._dd.find('.dropdown-item').first();\r\n            }\r\n            currElem.removeClass('active');\r\n            nextElem.addClass('active');\r\n        }\r\n    };\r\n    DropdownV4.prototype.focusPreviousItem = function () {\r\n        this.focusNextItem(true);\r\n    };\r\n    DropdownV4.prototype.selectFocusItem = function () {\r\n        this._dd.find('.dropdown-item.active').trigger('click');\r\n    };\r\n    Object.defineProperty(DropdownV4.prototype, \"isItemFocused\", {\r\n        get: function () {\r\n            if (this._dd && (this._dd.find('.dropdown-item.active').length > 0)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    DropdownV4.prototype.show = function () {\r\n        if (!this.shown) {\r\n            var pos = this.getElPos();\r\n            // this._dd.css({ top: pos.top + this._$el.outerHeight(), left: pos.left, width: this._$el.outerWidth() });\r\n            this._dd.addClass('show');\r\n            this.shown = true;\r\n        }\r\n    };\r\n    DropdownV4.prototype.isShown = function () {\r\n        return this.shown;\r\n    };\r\n    DropdownV4.prototype.hide = function () {\r\n        if (this.shown) {\r\n            this._dd.removeClass('show');\r\n            this.shown = false;\r\n        }\r\n    };\r\n    DropdownV4.prototype.updateItems = function (items, searchText) {\r\n        // console.log('updateItems', items);\r\n        this.items = items;\r\n        this.searchText = searchText;\r\n        this.refreshItemList();\r\n    };\r\n    DropdownV4.prototype.showMatchedText = function (text, qry) {\r\n        var startIndex = text.toLowerCase().indexOf(qry.toLowerCase());\r\n        if (startIndex > -1) {\r\n            var endIndex = startIndex + qry.length;\r\n            return text.slice(0, startIndex) + '<b>'\r\n                + text.slice(startIndex, endIndex) + '</b>'\r\n                + text.slice(endIndex);\r\n        }\r\n        return text;\r\n    };\r\n    DropdownV4.prototype.refreshItemList = function () {\r\n        var _this = this;\r\n        this.checkInitialized();\r\n        this._dd.empty();\r\n        var liList = [];\r\n        if (this.items.length > 0) {\r\n            this.items.forEach(function (item) {\r\n                var itemFormatted = _this.formatItem(item);\r\n                if (typeof itemFormatted === 'string') {\r\n                    itemFormatted = { text: itemFormatted };\r\n                }\r\n                var itemText;\r\n                var itemHtml;\r\n                itemText = _this.showMatchedText(itemFormatted.text, _this.searchText);\r\n                if (itemFormatted.html !== undefined) {\r\n                    itemHtml = itemFormatted.html;\r\n                }\r\n                else {\r\n                    itemHtml = itemText;\r\n                }\r\n                var disabledItem = itemFormatted.disabled;\r\n                var li = $('<a >');\r\n                li.attr('href', '#!')\r\n                    .addClass('dropdown-item')\r\n                    .html(itemHtml)\r\n                    .data('item', item);\r\n                if (disabledItem) {\r\n                    li.addClass('disabled');\r\n                }\r\n                liList.push(li);\r\n            });\r\n        }\r\n        else {\r\n            // No results\r\n            var li = $('<a >');\r\n            li.attr('href', '#!')\r\n                .addClass('dropdown-item disabled')\r\n                .html(this.noResultsText);\r\n            liList.push(li);\r\n        }\r\n        this._dd.append(liList);\r\n    };\r\n    DropdownV4.prototype.itemSelectedLaunchEvent = function (item) {\r\n        // launch selected event\r\n        // console.log('itemSelectedLaunchEvent', item);\r\n        this._$el.trigger('autocomplete.select', item);\r\n    };\r\n    return DropdownV4;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack:///./src/dropdown.ts?");

/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _resolvers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resolvers */ \"./src/resolvers.ts\");\n/* harmony import */ var _dropdown__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./dropdown */ \"./src/dropdown.ts\");\n/* =============================================================\r\n * bootstrap-autocomplete.js v2.0.0\r\n * https://github.com/xcash/bootstrap-autocomplete\r\n * =============================================================\r\n * Forked from bootstrap3-typeahead.js v3.1.0\r\n * https://github.com/bassjobsen/Bootstrap-3-Typeahead\r\n * =============================================================\r\n * Original written by @mdo and @fat\r\n * =============================================================\r\n * Copyright 2018 Paolo Casciello @xcash666 and contributors\r\n *\r\n * Licensed under the MIT License (the 'License');\r\n * you may not use this file except in compliance with the License.\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an 'AS IS' BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * ============================================================ */\r\n\r\n\r\nvar AutoCompleteNS;\r\n(function (AutoCompleteNS) {\r\n    var AutoComplete = /** @class */ (function () {\r\n        function AutoComplete(element, options) {\r\n            this._selectedItem = null;\r\n            this._defaultValue = null;\r\n            this._defaultText = null;\r\n            this._isSelectElement = false;\r\n            this._settings = {\r\n                resolver: 'ajax',\r\n                resolverSettings: {},\r\n                minLength: 3,\r\n                valueKey: 'value',\r\n                formatResult: this.defaultFormatResult,\r\n                autoSelect: true,\r\n                noResultsText: 'No results',\r\n                events: {\r\n                    typed: null,\r\n                    searchPre: null,\r\n                    search: null,\r\n                    searchPost: null,\r\n                    select: null,\r\n                    focus: null,\r\n                }\r\n            };\r\n            this._el = element;\r\n            this._$el = $(this._el);\r\n            // element type\r\n            if (this._$el.is('select')) {\r\n                this._isSelectElement = true;\r\n            }\r\n            // inline data attributes\r\n            this.manageInlineDataAttributes();\r\n            // constructor options\r\n            if (typeof options === 'object') {\r\n                this._settings = $.extend(true, {}, this.getSettings(), options);\r\n            }\r\n            if (this._isSelectElement) {\r\n                this.convertSelectToText();\r\n            }\r\n            // console.log('initializing', this._settings);\r\n            this.init();\r\n        }\r\n        AutoComplete.prototype.manageInlineDataAttributes = function () {\r\n            // updates settings with data-* attributes\r\n            var s = this.getSettings();\r\n            if (this._$el.data('url')) {\r\n                s['resolverSettings'].url = this._$el.data('url');\r\n            }\r\n            if (this._$el.data('default-value')) {\r\n                this._defaultValue = this._$el.data('default-value');\r\n            }\r\n            if (this._$el.data('default-text')) {\r\n                this._defaultText = this._$el.data('default-text');\r\n            }\r\n            if (this._$el.data('noresults-text')) {\r\n                s['noResultsText'] = this._$el.data('noresults-text');\r\n            }\r\n        };\r\n        AutoComplete.prototype.getSettings = function () {\r\n            return this._settings;\r\n        };\r\n        AutoComplete.prototype.getBootstrapVersion = function () {\r\n            // @ts-ignore\r\n            var version_string = $.fn.button.Constructor.VERSION;\r\n            var version_array = version_string.split('.');\r\n            return version_array;\r\n        };\r\n        AutoComplete.prototype.convertSelectToText = function () {\r\n            // create hidden field\r\n            var hidField = $('<input>');\r\n            hidField.attr('type', 'hidden');\r\n            hidField.attr('name', this._$el.attr('name'));\r\n            if (this._defaultValue) {\r\n                hidField.val(this._defaultValue);\r\n            }\r\n            this._selectHiddenField = hidField;\r\n            hidField.insertAfter(this._$el);\r\n            // create search input element\r\n            var searchField = $('<input>');\r\n            // copy all attributes\r\n            searchField.attr('type', 'text');\r\n            searchField.attr('name', this._$el.attr('name') + '_text');\r\n            searchField.attr('id', this._$el.attr('id'));\r\n            searchField.attr('disabled', this._$el.attr('disabled'));\r\n            searchField.attr('placeholder', this._$el.attr('placeholder'));\r\n            searchField.attr('autocomplete', 'off');\r\n            searchField.addClass(this._$el.attr('class'));\r\n            if (this._defaultText) {\r\n                searchField.val(this._defaultText);\r\n            }\r\n            // attach class\r\n            searchField.data(AutoCompleteNS.AutoComplete.NAME, this);\r\n            // replace original with searchField\r\n            this._$el.replaceWith(searchField);\r\n            this._$el = searchField;\r\n            this._el = searchField.get(0);\r\n        };\r\n        AutoComplete.prototype.init = function () {\r\n            // bind default events\r\n            this.bindDefaultEventListeners();\r\n            // RESOLVER\r\n            if (this._settings.resolver === 'ajax') {\r\n                // configure default resolver\r\n                this.resolver = new _resolvers__WEBPACK_IMPORTED_MODULE_0__[\"AjaxResolver\"](this._settings.resolverSettings);\r\n            }\r\n            // Dropdown\r\n            if (this.getBootstrapVersion()[0] == 4) {\r\n                // v4\r\n                this._dd = new _dropdown__WEBPACK_IMPORTED_MODULE_1__[\"DropdownV4\"](this._$el, this._settings.formatResult, this._settings.autoSelect, this._settings.noResultsText);\r\n            }\r\n            else {\r\n                this._dd = new _dropdown__WEBPACK_IMPORTED_MODULE_1__[\"Dropdown\"](this._$el, this._settings.formatResult, this._settings.autoSelect, this._settings.noResultsText);\r\n            }\r\n        };\r\n        AutoComplete.prototype.bindDefaultEventListeners = function () {\r\n            var _this = this;\r\n            this._$el.on('keydown', function (evt) {\r\n                // console.log('keydown', evt.which, evt);\r\n                switch (evt.which) {\r\n                    case 9: // TAB\r\n                        if (_this._settings.autoSelect) {\r\n                            // if autoSelect enabled selects on blur the currently selected item\r\n                            _this._dd.selectFocusItem();\r\n                        }\r\n                        break;\r\n                    case 13: // ENTER\r\n                        if (_this._dd.isItemFocused) {\r\n                            _this._dd.selectFocusItem();\r\n                        }\r\n                        else {\r\n                            if (_this._$el.val() !== '') {\r\n                                _this._$el.trigger('autocomplete.freevalue', _this._$el.val());\r\n                            }\r\n                        }\r\n                        _this._dd.hide();\r\n                        break;\r\n                }\r\n            });\r\n            this._$el.on('keyup', function (evt) {\r\n                // console.log('keyup', evt.which, evt);\r\n                // check key\r\n                switch (evt.which) {\r\n                    case 16: // shift\r\n                    case 17: // ctrl\r\n                    case 18: // alt\r\n                    case 39: // right\r\n                    case 37: // left \r\n                        break;\r\n                    case 40:\r\n                        // arrow DOWN\r\n                        _this._dd.focusNextItem();\r\n                        break;\r\n                    case 38: // up arrow\r\n                        _this._dd.focusPreviousItem();\r\n                        break;\r\n                    case 13:\r\n                        // ENTER\r\n                        _this._dd.hide();\r\n                        break;\r\n                    case 27:\r\n                        // ESC\r\n                        _this._dd.hide();\r\n                        break;\r\n                    default:\r\n                        var newValue = _this._$el.val();\r\n                        _this.handlerTyped(newValue);\r\n                }\r\n            });\r\n            this._$el.on('blur', function (evt) {\r\n                // console.log(evt);\r\n                if (!_this._dd.isMouseOver && _this._dd.isDdMouseOver && _this._dd.isShown()) {\r\n                    // Firefox Workaround\r\n                    setTimeout(function () { _this._$el.focus(); });\r\n                    // Other browsers\r\n                    _this._$el.focus();\r\n                }\r\n                else if (!_this._dd.isMouseOver) {\r\n                    if (_this._isSelectElement) {\r\n                        // if it's a select element you must\r\n                        if (_this._dd.isItemFocused) {\r\n                            _this._dd.selectFocusItem();\r\n                        }\r\n                        else if ((_this._selectedItem !== null) && (_this._$el.val() !== '')) {\r\n                            // reselect it\r\n                            _this._$el.trigger('autocomplete.select', _this._selectedItem);\r\n                        }\r\n                        else if ((_this._$el.val() !== '') && (_this._defaultValue !== null)) {\r\n                            // select Default\r\n                            _this._$el.val(_this._defaultText);\r\n                            _this._selectHiddenField.val(_this._defaultValue);\r\n                            _this._selectedItem = null;\r\n                        }\r\n                        else {\r\n                            // empty the values\r\n                            _this._$el.val('');\r\n                            _this._selectHiddenField.val('');\r\n                            _this._selectedItem = null;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // It's a text element, we accept custom value.\r\n                        // Developers may subscribe to `autocomplete.freevalue` to get notified of this\r\n                        if ((_this._selectedItem === null) && (_this._$el.val() !== '')) {\r\n                            _this._$el.trigger('autocomplete.freevalue', _this._$el.val());\r\n                        }\r\n                    }\r\n                    _this._dd.hide();\r\n                }\r\n            });\r\n            // selected event\r\n            // @ts-ignore - Ignoring TS type checking\r\n            this._$el.on('autocomplete.select', function (evt, item) {\r\n                _this._selectedItem = item;\r\n                _this.itemSelectedDefaultHandler(item);\r\n            });\r\n        };\r\n        AutoComplete.prototype.handlerTyped = function (newValue) {\r\n            // field value changed\r\n            // custom handler may change newValue\r\n            if (this._settings.events.typed !== null) {\r\n                newValue = this._settings.events.typed(newValue);\r\n                if (!newValue)\r\n                    return;\r\n            }\r\n            // if value >= minLength, start autocomplete\r\n            if (newValue.length >= this._settings.minLength) {\r\n                this._searchText = newValue;\r\n                this.handlerPreSearch();\r\n            }\r\n            else {\r\n                this._dd.hide();\r\n            }\r\n        };\r\n        AutoComplete.prototype.handlerPreSearch = function () {\r\n            // do nothing, start search\r\n            // custom handler may change newValue\r\n            if (this._settings.events.searchPre !== null) {\r\n                var newValue = this._settings.events.searchPre(this._searchText);\r\n                if (!newValue)\r\n                    return;\r\n                this._searchText = newValue;\r\n            }\r\n            this.handlerDoSearch();\r\n        };\r\n        AutoComplete.prototype.handlerDoSearch = function () {\r\n            var _this = this;\r\n            // custom handler may change newValue\r\n            if (this._settings.events.search !== null) {\r\n                this._settings.events.search(this._searchText, function (results) {\r\n                    _this.postSearchCallback(results);\r\n                });\r\n            }\r\n            else {\r\n                // Default behaviour\r\n                // search using current resolver\r\n                if (this.resolver) {\r\n                    this.resolver.search(this._searchText, function (results) {\r\n                        _this.postSearchCallback(results);\r\n                    });\r\n                }\r\n            }\r\n        };\r\n        AutoComplete.prototype.postSearchCallback = function (results) {\r\n            // console.log('callback called', results);\r\n            // custom handler may change newValue\r\n            if (this._settings.events.searchPost) {\r\n                results = this._settings.events.searchPost(results);\r\n                if ((typeof results === 'boolean') && !results)\r\n                    return;\r\n            }\r\n            this.handlerStartShow(results);\r\n        };\r\n        AutoComplete.prototype.handlerStartShow = function (results) {\r\n            // console.log(\"defaultEventStartShow\", results);\r\n            // for every result, draw it\r\n            this._dd.updateItems(results, this._searchText);\r\n            this._dd.show();\r\n        };\r\n        AutoComplete.prototype.itemSelectedDefaultHandler = function (item) {\r\n            // console.log('itemSelectedDefaultHandler', item);\r\n            // default behaviour is set elment's .val()\r\n            var itemFormatted = this._settings.formatResult(item);\r\n            if (typeof itemFormatted === 'string') {\r\n                itemFormatted = { text: itemFormatted };\r\n            }\r\n            this._$el.val(itemFormatted.text);\r\n            // if the element is a select\r\n            if (this._isSelectElement) {\r\n                this._selectHiddenField.val(itemFormatted.value);\r\n            }\r\n            // save selected item\r\n            this._selectedItem = item;\r\n            // and hide\r\n            this._dd.hide();\r\n        };\r\n        AutoComplete.prototype.defaultFormatResult = function (item) {\r\n            if (typeof item === 'string') {\r\n                return { text: item };\r\n            }\r\n            else if (item.text) {\r\n                return item;\r\n            }\r\n            else {\r\n                // return a toString of the item as last resort\r\n                // console.error('No default formatter for item', item);\r\n                return { text: item.toString() };\r\n            }\r\n        };\r\n        AutoComplete.prototype.manageAPI = function (APICmd, params) {\r\n            // manages public API\r\n            if (APICmd === 'set') {\r\n                this.itemSelectedDefaultHandler(params);\r\n            }\r\n        };\r\n        AutoComplete.NAME = 'autoComplete';\r\n        return AutoComplete;\r\n    }());\r\n    AutoCompleteNS.AutoComplete = AutoComplete;\r\n})(AutoCompleteNS || (AutoCompleteNS = {}));\r\n(function ($, window, document) {\r\n    // @ts-ignore\r\n    $.fn[AutoCompleteNS.AutoComplete.NAME] = function (optionsOrAPI, optionalParams) {\r\n        return this.each(function () {\r\n            var pluginClass;\r\n            pluginClass = $(this).data(AutoCompleteNS.AutoComplete.NAME);\r\n            if (!pluginClass) {\r\n                pluginClass = new AutoCompleteNS.AutoComplete(this, optionsOrAPI);\r\n                $(this).data(AutoCompleteNS.AutoComplete.NAME, pluginClass);\r\n            }\r\n            pluginClass.manageAPI(optionsOrAPI, optionalParams);\r\n        });\r\n    };\r\n})(jQuery, window, document);\r\n\n\n//# sourceURL=webpack:///./src/main.ts?");

/***/ }),

/***/ "./src/resolvers.ts":
/*!**************************!*\
  !*** ./src/resolvers.ts ***!
  \**************************/
/*! exports provided: BaseResolver, AjaxResolver */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseResolver\", function() { return BaseResolver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"AjaxResolver\", function() { return AjaxResolver; });\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nvar BaseResolver = /** @class */ (function () {\r\n    function BaseResolver(options) {\r\n        this._settings = $.extend(true, {}, this.getDefaults(), options);\r\n    }\r\n    BaseResolver.prototype.getDefaults = function () {\r\n        return {};\r\n    };\r\n    BaseResolver.prototype.getResults = function (limit, start, end) {\r\n        return this.results;\r\n    };\r\n    BaseResolver.prototype.search = function (q, cbk) {\r\n        cbk(this.getResults());\r\n    };\r\n    return BaseResolver;\r\n}());\r\n\r\nvar AjaxResolver = /** @class */ (function (_super) {\r\n    __extends(AjaxResolver, _super);\r\n    function AjaxResolver(options) {\r\n        return _super.call(this, options) || this;\r\n        // console.log('resolver settings', this._settings);\r\n    }\r\n    AjaxResolver.prototype.getDefaults = function () {\r\n        return {\r\n            url: '',\r\n            method: 'get',\r\n            queryKey: 'q',\r\n            extraData: {},\r\n            timeout: undefined,\r\n        };\r\n    };\r\n    AjaxResolver.prototype.search = function (q, cbk) {\r\n        var _this = this;\r\n        if (this.jqXHR != null) {\r\n            this.jqXHR.abort();\r\n        }\r\n        var data = {};\r\n        data[this._settings.queryKey] = q;\r\n        $.extend(data, this._settings.extraData);\r\n        this.jqXHR = $.ajax(this._settings.url, {\r\n            method: this._settings.method,\r\n            data: data,\r\n            timeout: this._settings.timeout\r\n        });\r\n        this.jqXHR.done(function (result) {\r\n            cbk(result);\r\n        });\r\n        this.jqXHR.fail(function (err) {\r\n            // console.log(err);\r\n        });\r\n        this.jqXHR.always(function () {\r\n            _this.jqXHR = null;\r\n        });\r\n    };\r\n    return AjaxResolver;\r\n}(BaseResolver));\r\n\r\n\n\n//# sourceURL=webpack:///./src/resolvers.ts?");

/***/ })

/******/ });